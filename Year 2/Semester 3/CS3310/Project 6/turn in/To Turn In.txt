*****************************************************************************************
WorldLogFile.txt
*****************************************************************************************


Connecting to MySQL and loading up WorldTrans.txt
OK, the DB Connection is OPENED

SQL (1): SELECT Name, Language, Percentage FROM Country, CountryLanguage WHERE Code = 'USA' AND Code = CountryCode
United States  Chinese        0.6            
United States  English        86.2           
United States  French         0.7            
United States  German         0.7            
United States  Italian        0.6            
United States  Japanese       0.2            
United States  Korean         0.3            
United States  Polish         0.3            
United States  Portuguese     0.2            
United States  Spanish        7.5            
United States  Tagalog        0.4            
United States  Vietnamese     0.2            

SQL (2): SELECT Name, LifeExpectancy, IndepYear FROM country WHERE continent = 'Europe' ORDER BY lifeexpectancy
Svalbard and Jan MayenNULL           NULL           
Moldova        64.5           1991           
Russian Federation67.2           1991           
Latvia         68.4           1991           
Lithuania      69.1           1991           
Estonia        69.5           1991           
Bulgaria       70.9           1908           
Bosnia and Herzegovina71.5           1992           
Poland         73.2           1918           
Slovakia       73.7           1993           
Macedonia      73.8           1991           
Slovenia       74.9           1991           
Denmark        76.5           800            
Germany        77.4           1955           
Finland        77.4           1917           
United Kingdom 77.7           1066           
Malta          77.9           1964           
Netherlands    78.3           1581           
Norway         78.7           1905           
France         78.8           843            
Liechtenstein  78.8           1806           
Monaco         78.8           1861           
Gibraltar      79.0           NULL           
Italy          79.0           1861           
Sweden         79.6           836            
Switzerland    79.6           1499           
San Marino     81.1           885            
Andorra        83.5           1278           

SQL (3): SELECT Name, LifeExpectancy FROM Country WHERE LifeExpectancy IN (SELECT MIN(LifeExpectancy) FROM country UNION SELECT MAX(LifeExpectancy) FROM Country) OR Code = 'USA'
Andorra        83.5           
United States  77.1           
Zambia         37.2           

SQL (4): SELECT Name, Percentage FROM Country, CountryLanguage WHERE Language = 'English' AND Percentage > 1.0 AND Code = CountryCode
Aruba          9.5            
Netherlands Antilles7.8            
American Samoa 3.1            
Australia      81.2           
Belize         50.8           
Bermuda        100.0          
Brunei         3.1            
Canada         60.4           
United Kingdom 97.3           
Gibraltar      88.9           
Guam           37.5           
Hong Kong      2.2            
Saint Lucia    20.0           
Monaco         6.5            
Malta          2.1            
Northern Mariana Islands4.8            
Malaysia       1.6            
Nauru          7.5            
New Zealand    87.0           
Palau          3.2            
Puerto Rico    47.4           
Trinidad and Tobago93.5           
United States  86.2           
Virgin Islands, U.S.81.7           
Vanuatu        28.3           
South Africa   8.5            
Zimbabwe       2.2            

SQL (5): SELECT Population FROM Country WHERE Name = 'Iceland'

SQL (6): SELECT COUNT(*) FROM Country

160

SQL (7): SELECT COUNT(*) FROM CountryLanguage

967

SQL (8): INSERT INTO CountryLanguage VALUES ('USA','C#','F',0.01)

OK, INSERT was done

SQL (9): INSERT INTO CountryLanguage VALUES('GBR','Java','F',0.01)

OK, INSERT was done

SQL (10): INSERT INTO CountryLanguage(CountryCode, Language) VALUES ('DEU','Java')

OK, INSERT was done

SQL (11): SELECT * FROM CountryLanguage WHERE Language = 'C#' or Language = 'Java'
DEU            Java           F              0.0            
GBR            Java           F              0.0            
USA            C#             F              0.0            

SQL (12): INSERT INTO Country (Code, Name, Population) VALUES ('KZO','Kalamazoo',85000)

OK, INSERT was done

SQL (13): INSERT INTO Country (Code, Name, HeadOfState, Continent, Region) VALUES('DIS','Disneyland','Mickey Mouse','North America','North America')

OK, INSERT was done

SQL (14): SELECT Code, Name, Population, HeadOfState, Continent, Region FROM Country WHERE code = 'KZO' or code = 'DIS'
DIS            Disneyland     0              Mickey Mouse   North America  North America  
KZO            Kalamazoo      85000          NULL           Asia                          

SQL (15): DELETE FROM Country WHERE Name = 'Iceland'

SQL (16): DELETE FROM Country WHERE Name = 'Faroe Islands'

SQL (17): DELETE FROM Country WHERE Code = 'SJM'

OK, DELETE was done

SQL (18): DELETE FROM CountryLanguage WHERE Language = 'Swedish'

OK, DELETE was done

SQL (19): DELETE FROM CountryLanguage WHERE Language = 'Russian'

OK, DELETE was done

SQL (20): SELECT Name FROM Country WHERE Region = 'Nordic Countries'
Denmark        
Finland        
Norway         
Sweden         

SQL (21): SELECT Name, Language FROM Country, CountryLanguage WHERE Region = 'Nordic Countries' AND Code = CountryCode
Denmark        Arabic         
Denmark        Danish         
Denmark        English        
Denmark        German         
Denmark        Norwegian      
Denmark        Turkish        
Finland        Estonian       
Finland        Finnish        
Finland        Saame          
Norway         Danish         
Norway         English        
Norway         Norwegian      
Norway         Saame          
Sweden         Arabic         
Sweden         Finnish        
Sweden         Norwegian      
Sweden         Southern Slavic Languages
Sweden         Spanish        

SQL (22): SELECT Name, Language FROM Country, CountryLanguage WHERE Region = 'Nordic Countries' AND Percentage > 99.5
Denmark        English        
Finland        English        
Norway         English        
Sweden         English        
Denmark        Crioulo        
Finland        Crioulo        
Norway         Crioulo        
Sweden         Crioulo        
Denmark        Spanish        
Finland        Spanish        
Norway         Spanish        
Sweden         Spanish        
Denmark        Creole English 
Finland        Creole English 
Norway         Creole English 
Sweden         Creole English 
Denmark        Arabic         
Finland        Arabic         
Norway         Arabic         
Sweden         Arabic         
Denmark        Faroese        
Finland        Faroese        
Norway         Faroese        
Sweden         Faroese        
Denmark        Creole English 
Finland        Creole English 
Norway         Creole English 
Sweden         Creole English 
Denmark        Haiti Creole   
Finland        Haiti Creole   
Norway         Haiti Creole   
Sweden         Haiti Creole   
Denmark        Creole English 
Finland        Creole English 
Norway         Creole English 
Sweden         Creole English 
Denmark        Korean         
Finland        Korean         
Norway         Korean         
Sweden         Korean         
Denmark        Dhivehi        
Finland        Dhivehi        
Norway         Dhivehi        
Sweden         Dhivehi        
Denmark        Korean         
Finland        Korean         
Norway         Korean         
Sweden         Korean         
Denmark        Rwanda         
Finland        Rwanda         
Norway         Rwanda         
Sweden         Rwanda         
Denmark        Spanish        
Finland        Spanish        
Norway         Spanish        
Sweden         Spanish        
Denmark        Italian        
Finland        Italian        
Norway         Italian        
Sweden         Italian        
Denmark        Arabic         
Finland        Arabic         
Norway         Arabic         
Sweden         Arabic         

SQL (23): UPDATE Country SET HeadOfState = 'Barack Obama' WHERE Name = 'United States'

OK, UPDATE was done

SQL (24): UPDATE CountryLanguage SET language = 'American English' WHERE CountryCode = 'USA' AND language = 'English'

OK, UPDATE was done

SQL (25): SELECT Name, HeadOfState FROM Country WHERE Code = 'USA'
United States  Barack Obama   

SQL (26): SELECT * FROM CountryLanguage WHERE CountryCode = 'USA' AND Percentage > 0.5
USA            American EnglishT              86.2           
USA            Chinese        F              0.6            
USA            French         F              0.7            
USA            German         F              0.7            
USA            Italian        F              0.6            
USA            Spanish        F              7.5            

SQL (27): SELECT COUNT(*) FROM Country

161

SQL (28): SELECT COUNT(*) FROM CountryLanguage

949

EXITING PROGRAM


*****************************************************************************************
WorldLogFile.java
*****************************************************************************************


/* PROJECT: WorldDataProject #6         PROGRAM: Driver
 * Written By: Marcel Englmaier
 * PROJECT CLASSES USED: DataRetrieval, DataUpdate
 * FILES ACCESSED: none
 * DESCRIPTION: this class has a few lines from Kaminski's driver, but is mostly mine
 *******************************************************************************/
package Driver;

import OOPClasses.DataRetrieval;
import OOPClasses.DataUpdate;
import java.io.*;
import java.sql.*;
import java.util.Scanner;

public class Driver 
{

    //<editor-fold defaultstate="collapsed" desc="Public Declarations">
    
    
    //**************************** PUBLIC DECLARATIONS ************************
    //None
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Private Declarations">
    
    
    //**************************** PRIVATE DECLARATIONS ************************
    //None
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Public Main">
    
    
    //****************************** PUBLIC Main *******************************
    public static void main(String[] args) throws SQLException, IOException
    {
        //pre-operations stuff
        DataRetrieval dataGetter = new DataRetrieval();;
        DataUpdate dataUpdate = new DataUpdate();;
        Connection conn;
        FileWriter file;
        int count;
        String url = "jdbc:mysql://localhost:3306/world";
        String user = "root";
        Scanner temp = new Scanner(System.in);
        String password = temp.nextLine();
        
        file = new FileWriter("WorldLogFile.txt");
        Scanner trans = new Scanner(new File("WorldTrans.txt"));
        String currentLine = "";
        conn = DriverManager.getConnection(url, user, password);
        count = 0;
        
        file.write("Connecting to MySQL and loading up WorldTrans.txt\r\n");
        
        file.write("OK, the DB Connection is OPENED\r\n");
        
        //do transdata
        while(trans.hasNextLine())
        {
            try
            {
                currentLine = trans.nextLine();
                count++;
                //do switch on first letter, then pass currentLine to private methods
                switch(currentLine.split(" ")[0].charAt(0))
                {
                    case 'S':
                        dataGetter.setSQLString(currentLine);
                        if(!currentLine.split(" ")[1].equals("COUNT(*)"))
                        {
                            dataGetter.DoQueryWhichGetsMultRows(conn, file, count);
                        }
                        else
                        {
                            dataGetter.DoQueryWhichGetsSingleValue(conn, file, count);
                        }
                        break;
                    case 'I':
                        dataUpdate.setSQLString(currentLine);
                        dataUpdate.DoInsert(conn, file, count);
                        break;
                    case 'D':
                        dataUpdate.setSQLString(currentLine);
                        dataUpdate.DoDelete(conn, file, count);
                        break;
                    case 'U':
                        dataUpdate.setSQLString(currentLine);
                        dataUpdate.DoUpdate(conn, file, count);
                }  
            }
            catch (Exception ex)
            {
                file.write("\r\nERROR, DB Connection didn't work - no trans done\r\n");
                file.write(ex.toString());
                System.out.println("ERROR, DB Connection didn't work - no trans done");
            }
        }
        conn.close();
        System.out.println("See WorldLogFile.txt in project folder");
        file.write("\r\nEXITING PROGRAM");
        file.close();
    }
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Public Get/Set Methods">
    
    
    //**************************** PUBLIC GET/SET METHODS **********************
    //None
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Public Service Methods">
    
    
    //**************************** PUBLIC SERVICE METHODS **********************
    //None
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Private Methods">
    
    
    //**************************** PRIVATE METHODS *****************************
    //None
    
    
    //</editor-fold>
}


*****************************************************************************************
DataRetrieval.java
*****************************************************************************************


/* PROJECT: WorldDataProject #6         CLASS: DataRetrieval
* Written By: Marcel Englmaier
* FILE STRUCTURE: OOP
* DESCRIPTION: This Class was taken from Kaminski, then changed to fit my needs
*******************************************************************************/

package OOPClasses;

import java.io.*;
import java.sql.*;
import java.text.NumberFormat;

public class DataRetrieval
{
    //<editor-fold defaultstate="collapsed" desc="Public Declarations">
    
    
    //**************************** PUBLIC DECLARATIONS ************************
    //None
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Private Declarations">
    
    
    //**************************** PRIVATE DECLARATIONS ************************
    private static String sql;
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Public Constructor(s)">
    
    
    //**************************** PUBLIC CONSTRUCTOR(S) ***********************
    //None
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Public Get/Set Methods">
    
    
    //**************************** PUBLIC GET/SET METHODS **********************
    public static void setSQLString(String temp)
    {
        sql = temp;
    }
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Public Service Methods">
    
    
    //**************************** PUBLIC SERVICE METHODS **********************
    public static void DoQueryWhichGetsMultRows(Connection conn, FileWriter file, int transNum) throws IOException
    {
        //create Log entry
        file.write(String.format("\r\nSQL (%d): %s\r\n", transNum, sql));
        
        try
        {
            //create a Statement object
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            ResultSetMetaData rsmd = rs.getMetaData();
            String tempValue = "";
            //do all the return value stuff
            while (rs.next())
            {
                for(int i = 1; i <= rsmd.getColumnCount(); i++)
                {
                    try
                    {
                        file.write(String.format("%-15s", rs.getObject(i).toString()));
                    }
                    catch(NullPointerException e)
                    {
                        file.write(String.format("%-15s", "NULL"));
                    }
                }
                file.write("\n");
            }
            rs.close();
            stmt.close();
        }
        catch (Exception ex)
        {
            file.write("\r\nERROR on " + transNum + ", QUERY not done\r\n");
            file.write(ex.toString() + "\r\n");
            System.out.println("\r\nERROR on " + transNum + ", QUERY not done");
        }
    }
    
    public static void DoQueryWhichGetsSingleValue(Connection conn, FileWriter file, int transNum) throws IOException
    {
        //create Log entry
        file.write(String.format("\r\nSQL (%d): %s\r\n", transNum, sql));

        try
        {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            //do all the return value stuff
            if (rs.next())
            {
                int number = rs.getInt(1);
                file.write(String.format("\r\n%d\r\n", 
                        number));
            }
            stmt.close();
        }
        catch (Exception ex)
        {
            file.write("\r\nERROR on " + transNum + ", QUERY not done\r\n");
            file.write(ex.toString() + "\r\n");
            System.out.println("\r\nERROR on " + transNum + ", QUERY not done");
        }
    }
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Private Methods">
    
    
    //**************************** PRIVATE METHODS *****************************
    //None
    
    
    //</editor-fold>
}


*****************************************************************************************
DataUpdate.java
*****************************************************************************************


/* PROJECT: WorldDataProject #6         CLASS: DataUpdate
* Written By: Marcel Englmaier
* FILE STRUCTURE: OOP
* DESCRIPTION: This Class was taken from Kaminski, then changed to fit my needs
*******************************************************************************/

package OOPClasses;

import java.io.*;
import java.sql.*;


public class DataUpdate
{
    //<editor-fold defaultstate="collapsed" desc="Public Declarations">
    
    
    //**************************** PUBLIC DECLARATIONS ************************
    //None
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Private Declarations">
    
    
    //**************************** PRIVATE DECLARATIONS ************************
    private static String sql;
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Public Constructor(s)">
    
    
    //**************************** PUBLIC CONSTRUCTOR(S) ***********************
    public DataUpdate()
    {
        
    }
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Public Get/Set Methods">
    
    
    //**************************** PUBLIC GET/SET METHODS **********************
    public static void setSQLString(String temp)
    {
        sql = temp;
    }
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Public Service Methods">
    
    
    //**************************** PUBLIC SERVICE METHODS **********************
    public static void DoInsert(Connection conn, FileWriter file, int transNum) throws IOException
    {
        //create log entry
        file.write(String.format("\r\nSQL (%d): %s\r\n", transNum, sql));

        try
        {
            //create a Statement object
            Statement stmt = conn.createStatement();
            int result = stmt.executeUpdate(sql);
            //do all the return value stuff
            if (result != 0)
            {
                file.write("\r\nOK, INSERT was done\r\n");
            }
        }
        catch (Exception ex)
        {
            file.write("\r\nERROR on " + transNum + ", INSERT not done\r\n");
            file.write(ex.toString() + "\r\n");
            System.out.println("ERROR on " + transNum + ", INSERT not done\r\n");
        }
    }
    
    public static void DoUpdate(Connection conn, FileWriter file, int transNum) throws IOException
    {
        //create log entry
        file.write(String.format("\r\nSQL (%d): %s\r\n", transNum, sql));

        try
        {
            Statement stmt = conn.createStatement();
            int result = stmt.executeUpdate(sql);
            //do all the return value stuff
            if (result != 0)
            {
                file.write("\r\nOK, UPDATE was done\r\n");
            }
        }
        catch (Exception ex)
        {
            file.write("\r\nERROR on " + transNum + ", UPDATE not done\r\n");
            file.write(ex.toString() + "\r\n");
            System.out.println("ERROR on " + transNum + ", UPDATE not done\r\n");
        }
    }
    
    public static void DoDelete(Connection conn, FileWriter file, int transNum) throws IOException
    {
        //create log entry
        file.write(String.format("\r\nSQL (%d): %s\r\n", transNum, sql));

        try
        {
            Statement stmt = conn.createStatement();
            int result = stmt.executeUpdate(sql);
            //do all the return value stuff
            if (result != 0)
            {
                file.write("\r\nOK, DELETE was done\r\n");
            }
        }
        catch (Exception ex)
        {
            file.write("\r\nERROR on " + transNum + ", DELETE not done\r\n");
            file.write(ex.toString() + "\r\n");
            System.out.println("ERROR on " + transNum + ", DELETE not done\r\n");
        }
    }
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Private Methods">
    
    
    //**************************** PRIVATE METHODS *****************************
    //None
    
    
    //</editor-fold>
}