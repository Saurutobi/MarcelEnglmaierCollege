package runClass;

import java.io.*;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * class RestaurantSearchWindow contains the GUI and action listeners for the main program window
 * @author Marcel Englmaier/Thomas Ekema/Bobby Wojo
 */
public class RestaurantSearchWindow extends javax.swing.JFrame {

    public File selectedFile;
    public static LinkedList<Restaurant> listOfRestaurants = new LinkedList<Restaurant>();
    public static SimpleLinkedList<Restaurant> sortedRestaurants = new SimpleLinkedList<Restaurant>();
    public static ArrayList<String> typesOfCuisine = new ArrayList<String>();
    public static String add;
    
    /** Creates new form RestaurantSearchWindow */
    public RestaurantSearchWindow() {
        initComponents();
        addButton.setEnabled(false);
        searchButton.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        restaurantList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        loadButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        xField = new javax.swing.JTextField();
        yField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cuisineSelection = new javax.swing.JComboBox();
        searchButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jScrollPane2.setViewportView(restaurantList);

        jLabel1.setText("Restaurant Locator");

        loadButton.setText("Load Locations");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("X:");

        jLabel3.setText("Y:");

        jLabel4.setText("Type of Cuisine:");

        cuisineSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2" }));
        cuisineSelection.setEnabled(false);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add Restaurant...");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(xField)
                                                .addGap(34, 34, 34))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(loadButton)
                                                .addGap(48, 48, 48)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(18, 18, 18)
                                                .addComponent(yField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(addButton)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(74, 74, 74)
                                        .addComponent(jLabel4)
                                        .addGap(28, 28, 28)
                                        .addComponent(cuisineSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(searchButton)
                                .addGap(117, 117, 117)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loadButton)
                            .addComponent(addButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(yField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(xField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cuisineSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addComponent(searchButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * method loadButtonActionPerformed responds to a mouse click on the load button
     * @param evt Takes in an action event (in this case, a mouse click)
     */
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        try
        {
            //displays a Java File Chooser for user to select input file
            JFileChooser fileChooser = new JFileChooser();
            int status = fileChooser.showOpenDialog(null);
            if(status == JFileChooser.APPROVE_OPTION)
            {
                //instantiates a file object from the chosen file
                selectedFile = fileChooser.getSelectedFile();
            }
            loadButton.setEnabled(false);
            loadFile();
        }
        catch(NullPointerException e)
        {
            JOptionPane.showMessageDialog(null, "No File is chosen, please choose a file", "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, "There was a File-Read error, please check file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_loadButtonActionPerformed
    
    /**
     * method searchButtonActionPerformed responds to a mouse click on the search button
     * @param evt Takes in an action event (in this case, a mouse click)
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        restaurantList.removeAll();
        sortedRestaurants = new SimpleLinkedList<Restaurant>();
        sortAndPrint((String)cuisineSelection.getSelectedItem());
    }//GEN-LAST:event_searchButtonActionPerformed
    
    /**
     * method addButtonActionPerformed responds to a mouse click on the add button
     * @param evt Takes in an action event (in this case, a mouse click)
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        AddRestaurantWindow addRestaurant = new AddRestaurantWindow();
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * The main method
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RestaurantSearchWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RestaurantSearchWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RestaurantSearchWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RestaurantSearchWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RestaurantSearchWindow().setVisible(true);
            }
        });
    }
    
    /**
     * this method loads the file, reading it into the Restaurant Object, and then
     * adds said object to the list of Restaurants
     */
    public void loadFile() throws IOException
    {
        //loads user's input file to raf
        RandomAccessFile raf = new RandomAccessFile(selectedFile, "rw");
        //declare and initialize variables needed for reading algorithm
        int i = 0;
        boolean doLoopAgain = true;
        String name = "";
        String type = "";
        int stars = 0;
        int x = 0;
        int y = 0;
        boolean addType = true;
        Restaurant tempRestaurant;
        
        //a loop to repeat so long as information exists
        do
        {
            //try-catch block in loop repeats until an error is caught, and then the loop discontinues
            try
            {
                name = raf.readUTF();
                type = raf.readUTF();
                for(i = 0; i < typesOfCuisine.size(); i++)
                {
                    if(type.equalsIgnoreCase(typesOfCuisine.get(i)))
                    {
                        addType = false;
                    }
                }
                if(addType)
                {
                    typesOfCuisine.add(type);
                }
                addType = true;
                stars = raf.readInt();
                x = raf.readInt();
                y = raf.readInt();
                //create Restaurant Object and add to list of Restaurants
                tempRestaurant = new Restaurant(name, type, stars, x, y);
                listOfRestaurants.add(tempRestaurant);
            }
            catch(IOException e)
            {
                doLoopAgain = false;
            }
        }while(doLoopAgain);
        
            //enable GUI for use
            searchButton.setEnabled(true);
            addButton.setEnabled(true);
            //this prints out everything, and tells the sortAndPrint method that it is not sorting
            sortAndPrint("all");
            cuisineSelection.setEnabled(true);
            cuisineSelection.removeAllItems();
            cuisineSelection.addItem("all");
            for(i = 0; i < typesOfCuisine.size(); i++)
            {
                cuisineSelection.addItem(typesOfCuisine.get(i));
            }
        
    }
    
    /**
     * this method takes the contents of all changeable items, and sorts through
     * the full list of Restaurants
     */
    public static void sortAndPrint(String type)
    {
        int i = 0;
        Restaurant [] sortedRestaurantsArray;
        if(type != "all")
        {
            //sorting logic here
            for(i = 0; i < listOfRestaurants.size(); i++)
            {
                if(listOfRestaurants.get(i).getType().equalsIgnoreCase(type))
                {
                    listOfRestaurants.get(i).setDistance(Integer.parseInt(xField.getText()), Integer.parseInt(yField.getText()));
                    sortedRestaurants.add(listOfRestaurants.get(i));
                }
            }
            
            sortedRestaurantsArray = new Restaurant[sortedRestaurants.size()];;
            for(i = 0; i < sortedRestaurants.size(); i++)
            {
                sortedRestaurantsArray[i] = (Restaurant)sortedRestaurants.get(i);
            }
        }
        else
        {
            sortedRestaurantsArray = new Restaurant[listOfRestaurants.size()];;
            for(i = 0; i < listOfRestaurants.size(); i++)
            {
                sortedRestaurantsArray[i] = (Restaurant)listOfRestaurants.get(i);
            }
        }
        
        //printing to list here
        
        //add to output list
        restaurantList.setListData(sortedRestaurantsArray);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    public static javax.swing.JComboBox cuisineSelection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton loadButton;
    private static javax.swing.JList restaurantList;
    private javax.swing.JButton searchButton;
    private static javax.swing.JTextField xField;
    private static javax.swing.JTextField yField;
    // End of variables declaration//GEN-END:variables
}
