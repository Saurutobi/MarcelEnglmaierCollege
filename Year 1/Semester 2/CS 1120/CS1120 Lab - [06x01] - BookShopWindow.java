package booksGroupProject;

import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Marcel Englmaier/Thomas Ekema
 */
public class BookShopWindow extends javax.swing.JFrame
{
    //various methods which allow functionality/are critical to use
    private File selectedFile;
    private File saveFile;
    private boolean [] inputBoolean = new boolean[1];
    private String saveFilePath;
    private String [] inputString = new String[1];
    private double [] inputDouble = new double [1];
    private ArrayList<String> cartItems = new ArrayList<String>();
    private String [] cartItemsStringArray;
    private DecimalFormat formatMyDouble = new DecimalFormat("0.00");
    //when checkout is pressed, create these with number of items
    private double totalCost;
    
    /** Creates new form BookShopWindow */
    public BookShopWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator3 = new javax.swing.JSeparator();
        greetingLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        buttonChooseFile = new javax.swing.JButton();
        buttonLoadInventory = new javax.swing.JButton();
        fieldFileName = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        calculateTotalButton = new javax.swing.JButton();
        paymentDueLabel = new javax.swing.JLabel();
        checkOutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        greetingLabel.setText("Welcome to the Book Shop");

        buttonChooseFile.setText("Choose File");
        buttonChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseFileActionPerformed(evt);
            }
        });

        buttonLoadInventory.setText("Load Inventory");
        buttonLoadInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadInventoryActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(inventoryList);

        jScrollPane2.setViewportView(cartList);

        addButton.setText("Add-->");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        calculateTotalButton.setText("Calculate Total");
        calculateTotalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateTotalButtonActionPerformed(evt);
            }
        });

        checkOutButton.setText("Checkout!");
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addButton)
                                .addGap(3, 3, 3))
                            .addComponent(removeButton))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(buttonChooseFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonLoadInventory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(50, 50, 50)
                        .addComponent(fieldFileName)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(278, Short.MAX_VALUE)
                .addComponent(greetingLabel)
                .addGap(259, 259, 259))
            .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(calculateTotalButton)
                        .addGap(70, 70, 70)
                        .addComponent(paymentDueLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(checkOutButton)))
                .addContainerGap(293, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(greetingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonChooseFile)
                    .addComponent(fieldFileName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonLoadInventory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeButton)
                        .addGap(67, 67, 67))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculateTotalButton)
                    .addComponent(paymentDueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkOutButton)
                .addContainerGap())
        );

        addButton.setEnabled(false);
        removeButton.setEnabled(false);
        calculateTotalButton.setEnabled(false);
        checkOutButton.setEnabled(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * This method responds to a mouse click on the "choose file" button
     * @param evt Takes in a action event (in this case, a mouse click) as the parameter
     */
    private void buttonChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseFileActionPerformed
        //displays a Java File Chooser for user to select input file
        JFileChooser fileChooser = new JFileChooser();
        int status = fileChooser.showOpenDialog(null);
        if(status == JFileChooser.APPROVE_OPTION)
        {
            //instantiates a file object from the chosen file
            selectedFile = fileChooser.getSelectedFile();
            //read and display the file name and path in a label
            String bookdata = selectedFile.getPath();
            fieldFileName.setText(bookdata);
        }
    }//GEN-LAST:event_buttonChooseFileActionPerformed
    /**
     * This method responds to a mouse click on the "load inventory" button
     * @param evt Takes in a action event (in this case, a mouse click) as the parameter
     */
    private void buttonLoadInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadInventoryActionPerformed
        //load inventory, and depending on how file is treated, display appropriate errors
        try
        {
            loadInventory();
        }
        catch(NullPointerException e)
        {
            JOptionPane.showMessageDialog(null, "No File is chosen, please choose a file", "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, "There was a File-Read error, please check file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonLoadInventoryActionPerformed
    /**
     * This method responds to a mouse click on the "add" button
     * @param evt Takes in a action event (in this case, a mouse click) as the parameter
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        //add selected value to the ArrayList object
        cartItems.add((String)inventoryList.getSelectedValue());
        //create a new string array of the same size
        cartItemsStringArray = new String[cartItems.size()];
        int i;
        //for i equals 0 to i is less than the length of the string array, do:
        for(i = 0; i < cartItemsStringArray.length; i++)
        {
            //fill the string array with the contents of the ArrayList object
            cartItemsStringArray[i] = cartItems.get(i);
        }
        //set list data to display the string array
        cartList.setListData(cartItemsStringArray);
        //check for contents of cart, and allow GUI components depending on cart
        if(cartItems.size() > 0)
        {
            calculateTotalButton.setEnabled(true);
        }
        else
        {
            calculateTotalButton.setEnabled(false);
        }
    }//GEN-LAST:event_addButtonActionPerformed
    /**
     * This method responds to a mouse click on the "remove" button
     * @param evt Takes in a action event (in this case, a mouse click) as the parameter
     */
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        //Remove selected value from ArrayList object
        cartItems.remove(cartList.getSelectedIndex());
        //create a new string array of the same size
        cartItemsStringArray = new String[cartItems.size()];
        int i;
        //for i equals 0 to i is less than the length of the string array, do:
        for(i = 0; i < cartItemsStringArray.length; i++)
        {
            //fill the string array with the contents of the ArrayList object
            cartItemsStringArray[i] = cartItems.get(i);
        }
        //set the list data to display the string array
        cartList.setListData(cartItemsStringArray);
        //check for contents of cart, and allow GUI components depending on cart
        if(cartItems.size() > 0)
        {
            calculateTotalButton.setEnabled(true);
        }
        else
        {
            calculateTotalButton.setEnabled(false);
        }
    }//GEN-LAST:event_removeButtonActionPerformed
    /**
     * This method responds to a mouse click on the "calculate" button
     * @param evt Takes in a action event (in this case, a mouse click) as the parameter
     */
    private void calculateTotalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateTotalButtonActionPerformed
        //add the total of the doubles, format to price
        int i;
        double temp = 0;
        //for i equals 0 to i is less than the ArrayList object size, do:
        for(i = 0; i < cartItems.size(); i++)
        {
            //add the doubles found at the end of the string to a temporary double
            temp += Double.parseDouble(cartItems.get(i).substring(cartItems.get(i).length() - 5, cartItems.get(i).length()));
        }
        //set total cost equal to the temporary double and display in label
        totalCost = temp;
        paymentDueLabel.setText(formatMyDouble.format(totalCost) + "");
        //enable/disable proper buttons
        addButton.setEnabled(false);
        removeButton.setEnabled(false);
        checkOutButton.setEnabled(true);
        calculateTotalButton.setEnabled(false);
    }//GEN-LAST:event_calculateTotalButtonActionPerformed
    /**
     * This method responds to a mouse click on the "check out" button
     * @param evt Takes in a action event (in this case, a mouse click) as the parameter
     */
    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        //try/catch block to call printReceiptToText method, catching any IOException
        try
        {
            printReceiptToText();
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, "Checkout Error", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_checkOutButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookShopWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookShopWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookShopWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookShopWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new BookShopWindow().setVisible(true);
            }
        });
    }
    
    /**
     * This method reads the .dat file, and outputs the values to three arrays
     */
    private void loadInventory() throws IOException
    {
        //loads user's input file to raf
        RandomAccessFile raf = new RandomAccessFile(selectedFile, "rw");
        //declare and initialize variables needed for reading algorithm
        int i = 0;
        boolean doLoopAgain = true;
        boolean readingBoolean = true;
        String readingString = "";
        String[] listString;
        double readingDouble = 1.0;
        //these three arrays are the trade-off manipulation arrays that allow the reading algorithm to function
        boolean [] manipulationBoolean = new boolean[1];
        String [] manipulationString = new String[1];
        double [] manipulationDouble = new double[1];
        
        //a loop to repeat so long as information exists
        do
        {
            //try-catch block in loop repeats until an error is caught, and then the loop discontinues
            try
            {
                //<editor-fold defaultstate="collapsed" desc="assigning variable and resetting main variables before reading">
                for(i = 0; i < manipulationBoolean.length - 1; i++)
                {
                    manipulationBoolean[i] = inputBoolean[i];
                }
                inputBoolean = new boolean[manipulationBoolean.length];
                
                for(i = 0; i < manipulationString.length - 1; i++)
                {
                    manipulationString[i] = inputString[i];
                }
                inputString = new String[manipulationString.length];
                
                for(i = 0; i < manipulationDouble.length - 1; i++)
                {
                    manipulationDouble[i] = inputDouble[i];
                }
                inputDouble = new double[manipulationDouble.length];
                //</editor-fold>
                
                //reading file
                readingBoolean = raf.readBoolean();
                readingString = raf.readUTF();
                readingDouble = raf.readDouble();
                
                //assigning read information to appropriate variables
                manipulationBoolean[manipulationBoolean.length - 1] = readingBoolean;
                manipulationString[manipulationString.length - 1] = readingString;
                manipulationDouble[manipulationDouble.length - 1] = readingDouble;
                
                //<editor-fold defaultstate="collapsed" desc="assigning variables and reseting temp variable">
                for(i = 0; i < manipulationDouble.length; i++)
                {
                    inputDouble[i] = manipulationDouble[i];
                }
                manipulationDouble = new double[inputDouble.length + 1];
                
                for(i = 0; i < manipulationString.length; i++)
                {
                    inputString[i] = manipulationString[i];
                }
                manipulationString = new String[inputString.length + 1];
                
                for(i = 0; i < manipulationBoolean.length; i++)
                {
                    inputBoolean[i] = manipulationBoolean[i];
                }
                manipulationBoolean = new boolean[inputBoolean.length + 1];
                //</editor-fold>
            }
            catch(IOException e)
            {
                doLoopAgain = false;
            }
            
        }while(doLoopAgain);
        
        //<editor-fold defaultstate="collapsed" desc="fomatting final variable through temp variable">
        inputBoolean = new boolean[manipulationBoolean.length - 1];
        inputString = new String[manipulationString.length - 1];
        inputDouble = new double[manipulationDouble.length - 1];
        listString = new String[manipulationString.length - 1];
        for(i = 0; i < inputBoolean.length; i++)
        {
            inputBoolean[i] = manipulationBoolean[i];
            inputString[i] = manipulationString[i];
            inputDouble[i] = manipulationDouble[i];
            if(inputBoolean[i])
                listString[i] = "ebook --> " + inputString[i] + formatMyDouble.format(inputDouble[i]);
            else
                listString[i] = "hardcopy --> " + inputString[i] + formatMyDouble.format(inputDouble[i]);
        }
        //</editor-fold>
        
        //add listString array to list
        inventoryList.setListData(listString);
        //disable load inventory file and check filename
        buttonLoadInventory.setEnabled(false);
        buttonChooseFile.setEnabled(false);
        
        //enable GUI for use
        addButton.setEnabled(true);
        removeButton.setEnabled(true);
        calculateTotalButton.setEnabled(true);
    }
    
    /**
     * This method takes information from the GUI, and prints the information in the
     * -form of a receipt to the any user's desktop
     */
    private void printReceiptToText() throws IOException
    {
        JFileChooser fileSave = new JFileChooser();
        int status = fileSave.showOpenDialog(null);
        if(status == JFileChooser.APPROVE_OPTION)
        {
            saveFile = fileSave.getSelectedFile();
            String saveFilePath = saveFile.getPath();
        
        //create file path to user's desktop, and create a receipt.txt file there
        //String userHomeFolder = System.getProperty("user.home") + "\\Desktop";
        
            File receiptFile = new File(saveFilePath);
            receiptFile.createNewFile();
            PrintWriter writeFile = new PrintWriter(receiptFile);
            //other declarations/initiations
            int i = 0;
            GregorianCalendar timeStamp = new GregorianCalendar();
        
            //print header
            writeFile.println("-----------------The  Book Shop-----------------");
            writeFile.println("--------------Kalamazoo, Mi, 49024--------------");
            writeFile.println("");
            writeFile.println("Bought Through: The Book Shop Official App");
            writeFile.println("");
            writeFile.println(timeStamp.getTime());
            writeFile.println("");
            writeFile.println("------------------------------------------------");
            writeFile.println("");
            //write list of items in cart to receipt
            for(i = 0; i < cartItems.size(); i++)
                writeFile.println(cartItems.get(i));
      
            //write cost to file, subtotal, sales tax, and total, then show receipt print success message
            writeFile.println("");
            writeFile.println("------------------------------------------------");
            writeFile.println("");
            writeFile.print("Subtotal:  ");
            writeFile.println(formatMyDouble.format(totalCost));
            writeFile.print("Sales Tax: ");
            double salesTax = totalCost * .06;
            writeFile.println(formatMyDouble.format(salesTax));
            totalCost = totalCost + salesTax;
            writeFile.print("Total Cost: ");
            writeFile.println(formatMyDouble.format(totalCost));
            JOptionPane.showMessageDialog(null, "Receipt printed Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            writeFile.close();
        
            //clear and enable all components of gui
            String [] clear = {""};
            buttonChooseFile.setEnabled(true);
            buttonLoadInventory.setEnabled(true);
            addButton.setEnabled(true);
            removeButton.setEnabled(true);
            calculateTotalButton.setEnabled(true);
            checkOutButton.setEnabled(true);
            fieldFileName.setText("");
            paymentDueLabel.setText("");
            inventoryList.setListData(clear);
            cartList.setListData(clear);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton buttonChooseFile;
    private javax.swing.JButton buttonLoadInventory;
    private javax.swing.JButton calculateTotalButton;
    private javax.swing.JList cartList;
    private javax.swing.JButton checkOutButton;
    private javax.swing.JLabel fieldFileName;
    private javax.swing.JLabel greetingLabel;
    private javax.swing.JList inventoryList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel paymentDueLabel;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}
