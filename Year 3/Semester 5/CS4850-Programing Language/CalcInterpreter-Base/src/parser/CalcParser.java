/* Generated By:JavaCC: Do not edit this line. CalcParser.java */
package parser;

import ast.*;
import util.*;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;

public class CalcParser implements CalcParserConstants {
        private static String getUserInput() throws IOException {
                String curLine = ""; // Line read from standard in

                InputStreamReader converter = new InputStreamReader(System.in);
                BufferedReader in = new BufferedReader(converter);

                curLine = in.readLine();

                return curLine;
        }

        private static void repl()
        {
            System.out.print( "====> ");
            try {
                        processCode(new StringReader(getUserInput()));
                } catch (IOException e) {
                        System.out.println("Error reading input");
                } catch (Error e) {
                        System.out.println("Uncaught Interpreter Error: "+e);
                } catch (Exception e) {
                        System.out.println("Uncaught Interpreter Exception: "+e);
                }
            repl();
        }

        public static void processCode(Reader code)
        {
            try {
                CalcParser.ReInit(code);
                ASTNode n = CalcParser.C();
                n.acceptDF(new PrintVisitor());
                System.out.print(" = ");
                Value v = (Value)n.accept(new EvalVisitor(new Environment()));
                System.out.println(v);
            }
            catch(ParseException e) {
                System.out.println("Syntax Error: "+e);
            } catch (CalcException e) {
                        System.out.println(e);
        }
        }


        /**
	 * @param args
	 * @throws FileNotFoundException 
	 */
        public static void main(String args []) throws ParseException, FileNotFoundException
        {
                CalcParser parser = new CalcParser(System.in);
                if (args.length > 0) {
                        processCode(new FileReader(args[0]));
                } else {
                        repl();
                }
        }

  static final public ASTNode C() throws ParseException {
  ASTNode node;
    node = E();
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode E() throws ParseException {
        ASTNode left,right;
    left = T();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        right = T();
      left = new AddNode(left,right);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        right = T();
      left = new SubNode(left,right);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode T() throws ParseException {
  ASTNode left,right;
    left = F();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        right = F();
      left = new MultiplyNode(left,right);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        right = F();
      left = new DivideNode(left,right);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode F() throws ParseException {
  ASTNode node, C1, C2;
  Token id,num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
        node = new IdNode(id.image);
      break;
    case NUM:
      num = jj_consume_token(NUM);
        node = new IntegerNode(Integer.parseInt(num.image));
      break;
    case WITH:
      jj_consume_token(WITH);
      jj_consume_token(LP);
      jj_consume_token(LBK);
      id = jj_consume_token(ID);
      num = jj_consume_token(NUM);
      jj_consume_token(RBK);
      jj_consume_token(RP);
      jj_consume_token(LB);
      node = C();
      jj_consume_token(RB);
        node = new WithNode(id.image,new IntegerNode(Integer.parseInt(num.image)),node);
      break;
    case CEIL:
      jj_consume_token(CEIL);
      jj_consume_token(LP);
      C1 = jj_consume_token(ID);
      jj_consume_token(COMMA);
      C2 = jj_consume_token(ID);
      jj_consume_token(RP);
        node = new CeilNode(C1, C2);
      break;
    case EXP:
      jj_consume_token(EXP);
      jj_consume_token(LP);
      C1 = jj_consume_token(ID);
      jj_consume_token(COMMA);
      C2 = jj_consume_token(ID);
      jj_consume_token(RP);
        node = new ExpNode(C1, C2);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalcParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x300,0x300,0xc00,0xc00,0x4800e0,};
   }

  /** Constructor with InputStream. */
  public CalcParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CalcParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CalcParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CalcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CalcParser(CalcParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CalcParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
