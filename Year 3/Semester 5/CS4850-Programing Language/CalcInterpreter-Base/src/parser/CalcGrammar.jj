/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.6";
  static = true;
}

PARSER_BEGIN(CalcParser)

package parser;

import ast.*;
import util.*;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;

public class CalcParser
{
	private static String getUserInput() throws IOException {
		String curLine = ""; // Line read from standard in
		
		InputStreamReader converter = new InputStreamReader(System.in);
		BufferedReader in = new BufferedReader(converter);

		curLine = in.readLine();
		
		return curLine;
	}
	
	private static void repl()
	{
	    System.out.print( "====> ");
	    try {
			processCode(new StringReader(getUserInput()));
		} catch (IOException e) {
			System.out.println("Error reading input");
		} catch (Error e) {
			System.out.println("Uncaught Interpreter Error: "+e);
		} catch (Exception e) {
			System.out.println("Uncaught Interpreter Exception: "+e);
		}
	    repl();
	}
	
	public static void processCode(Reader code)
	{
	    try {
	    	CalcParser.ReInit(code);
	    	ASTNode n = CalcParser.C();
	    	n.acceptDF(new PrintVisitor());
	    	System.out.print(" = ");
	    	Value v = (Value)n.accept(new EvalVisitor(new Environment()));
	    	System.out.println(v);
	    }
	    catch(ParseException e) {
	    	System.out.println("Syntax Error: "+e);
	    } catch (CalcException e) {
			System.out.println(e);
        }
	}
	

	/**
	 * @param args
	 * @throws FileNotFoundException 
	 */
	public static void main(String args []) throws ParseException, FileNotFoundException
	{
		CalcParser parser = new CalcParser(System.in);
		if (args.length > 0) {
			processCode(new FileReader(args[0]));			
		} else {
			repl();
		}
	}
}

PARSER_END(CalcParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* Keywords */
{  < WITH: "with" >
| < CEIL: "ceil" >
| < EXP: "exp" >
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < LP : "(" >
| < RP : ")" >
| < LBK : "[" >
| < RBK : "]" >
| < LB : "{" >
| < RB : "}" >
| < COMMA : "," >
}

TOKEN :
{
  < NUM : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
| <#ALPHA: ["a" - "z"] | ["A" - "Z"] >
| <ID: <ALPHA> (<ALPHA> | <DIGIT>)*>
}

ASTNode C() : 
{
  ASTNode node;
}
{
  node = E()
  {    return node;
  }
}

ASTNode E() :
{	ASTNode left,right;
}
{  left = T()
  (
    < PLUS > right = T()
    {      left = new AddNode(left,right);
    }
    | < MINUS > right = T()
    {      left = new SubNode(left,right);
    }
  )*
  {    return left;
  }
}

ASTNode T() :
{
  ASTNode left,right;}
{  left = F()
  (
    < MULTIPLY > right = F()
    {      left = new MultiplyNode(left,right);
    }
    | < DIVIDE > right = F()
    {      left = new DivideNode(left,right);
    }
  )*
  {    return left;
  }
}

ASTNode F() :
{  ASTNode node, C1, C2;
  Token id,num;
}
{ 	( 	  id = < ID >
 	  {
      	node = new IdNode(id.image);
      }
    | num = < NUM >
      {        node = new IntegerNode(Integer.parseInt(num.image));
      }
    | < WITH > < LP > < LBK > id = < ID > num = < NUM > < RBK > < RP > < LB > node = C() < RB >      {      	node = new WithNode(id.image,new IntegerNode(Integer.parseInt(num.image)),node);
      }
    | <CEIL> <LP> C1 = <ID> <COMMA> C2 = <ID> <RP>
      {
        node = new CeilNode(C1, C2);
      }
    | <EXP> <LP> C1 = <ID> <COMMA> C2 = <ID> <RP>
      {
        node = new ExpNode(C1, C2);
      }
 	)
 	{ 	  return node;
 	}
}