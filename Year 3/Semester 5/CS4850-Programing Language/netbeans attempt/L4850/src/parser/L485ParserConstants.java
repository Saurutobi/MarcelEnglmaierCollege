/* Generated By:JavaCC: Do not edit this line. L485ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface L485ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DEFUNC = 6;
  /** RegularExpression Id. */
  int DEFCLASS = 7;
  /** RegularExpression Id. */
  int METHOD = 8;
  /** RegularExpression Id. */
  int FUNC = 9;
  /** RegularExpression Id. */
  int COND = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int THEN = 12;
  /** RegularExpression Id. */
  int ELSE = 13;
  /** RegularExpression Id. */
  int FI = 14;
  /** RegularExpression Id. */
  int LOAD = 15;
  /** RegularExpression Id. */
  int NEW = 16;
  /** RegularExpression Id. */
  int VARS = 17;
  /** RegularExpression Id. */
  int ASSIGN = 18;
  /** RegularExpression Id. */
  int TO = 19;
  /** RegularExpression Id. */
  int WITH = 20;
  /** RegularExpression Id. */
  int TRUE = 21;
  /** RegularExpression Id. */
  int FALSE = 22;
  /** RegularExpression Id. */
  int PLUS = 23;
  /** RegularExpression Id. */
  int MINUS = 24;
  /** RegularExpression Id. */
  int MULTIPLY = 25;
  /** RegularExpression Id. */
  int DIVIDE = 26;
  /** RegularExpression Id. */
  int OR = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int NOT = 29;
  /** RegularExpression Id. */
  int EQUAL = 30;
  /** RegularExpression Id. */
  int NOTEQUAL = 31;
  /** RegularExpression Id. */
  int LESS = 32;
  /** RegularExpression Id. */
  int LESSEQUAL = 33;
  /** RegularExpression Id. */
  int GREATER = 34;
  /** RegularExpression Id. */
  int GREATEREQUAL = 35;
  /** RegularExpression Id. */
  int INVOKE = 36;
  /** RegularExpression Id. */
  int STRING = 37;
  /** RegularExpression Id. */
  int DIGIT = 38;
  /** RegularExpression Id. */
  int ALPHA = 39;
  /** RegularExpression Id. */
  int ID = 40;
  /** RegularExpression Id. */
  int EXPONENT = 41;
  /** RegularExpression Id. */
  int FLOATNUM = 42;
  /** RegularExpression Id. */
  int POSITIVE = 43;
  /** RegularExpression Id. */
  int INTNUM = 44;
  /** RegularExpression Id. */
  int DOT = 45;
  /** RegularExpression Id. */
  int LP = 46;
  /** RegularExpression Id. */
  int RP = 47;
  /** RegularExpression Id. */
  int LB = 48;
  /** RegularExpression Id. */
  int RB = 49;
  /** RegularExpression Id. */
  int LBK = 50;
  /** RegularExpression Id. */
  int RBK = 51;
  /** RegularExpression Id. */
  int COMMA = 52;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"defunc\"",
    "\"defclass\"",
    "\"method\"",
    "\"func\"",
    "\"cond\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"fi\"",
    "\"load\"",
    "\"new\"",
    "\"vars\"",
    "\"assign\"",
    "\"to\"",
    "\"with\"",
    "\"true\"",
    "\"false\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"||\"",
    "\"&&\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\"< \"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"->\"",
    "<STRING>",
    "<DIGIT>",
    "<ALPHA>",
    "<ID>",
    "<EXPONENT>",
    "<FLOATNUM>",
    "<POSITIVE>",
    "<INTNUM>",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
  };

}
